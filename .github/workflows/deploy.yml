name: Streamlit Login App (Running on the local machine)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # # Build Docker image with caching enabled
      # - name: Build Docker image and push
      #   run: |
      #     docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/login-app:latest --push .

      # # Step 4: Build Docker image
      # - name: Build the Docker image
      #   run: |
      #     docker build -t login-app . || (echo "Docker build failed!" && exit 1)

      # # Step 5: Tag Docker image with timestamp
      # - name: Tag the Docker image with timestamp
      #   run: |
      #     TIMESTAMP=$(date +%Y%m%d%H)  # Remove seconds to avoid mismatch
      #     echo "Generated timestamp: $TIMESTAMP"
      #     docker tag login-app:latest "${{ secrets.DOCKER_USERNAME }}/login-app:$TIMESTAMP"
      #     echo "Docker image tagged as: ${{ secrets.DOCKER_USERNAME }}/login-app:$TIMESTAMP"

      # # Step 6: Push Docker image to Docker Hub
      # - name: Push the Docker image to Docker Hub
      #   run: |
      #     TIMESTAMP=$(date +%Y%m%d%H)  # Remove seconds to avoid mismatch
      #     echo "Pushing Docker image: ${{ secrets.DOCKER_USERNAME }}/login-app:$TIMESTAMP"
      #     docker push "${{ secrets.DOCKER_USERNAME }}/login-app:$TIMESTAMP"

      #Step 7: Deploy to EC2
      - name: SSH into EC2 and deploy the app
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.EC2_SERVER_IP }}
        run: |
          echo "$PRIVATE_KEY" > cicd.pem
          chmod 600 cicd.pem
          chmod 400 cicd.pem
          # Start SSH agent and load the private key
          eval "$(ssh-agent -s)"
          ssh-add cicd.pem

          ssh -o StrictHostKeyChecking=no ec2-user@$SERVER_IP << EOF
            # Install Docker on Amazon Linux 2023 (if not already installed)
            sudo dnf install -y docker
            sudo systemctl enable docker
            sudo systemctl start docker

      #       # Add ec2-user to the docker group
      #       sudo usermod -aG docker ec2-user

      #       # Define the timestamp in EC2 as well
      #       TIMESTAMP=\$(date +%Y%m%d%H)  # Same timestamp format (without seconds)

      #       echo "Pulling Docker image: \$TIMESTAMP"

      #       # Pull the Docker image from Docker Hub using the timestamp
      #       docker pull "${{ secrets.DOCKER_USERNAME }}/login-app:\$TIMESTAMP"

      #       # Stop and remove any existing container
      #       docker stop login-app || true
      #       docker rm login-app || true

      #       # Run the new container
      #       docker run -d --name login-app -p 8501:8501 "${{ secrets.DOCKER_USERNAME }}/login-app:\$TIMESTAMP"
      #     EOF
